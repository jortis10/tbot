   1               		.file	"ip_pid.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	__subsf3
  12               	.global	__mulsf3
  13               	.global	__addsf3
  14               	.global	__gtsf2
  15               	.global	__ltsf2
  16               		.section	.text.pid_compute,"ax",@progbits
  17               	.global	pid_compute
  19               	pid_compute:
  20               	.LFB1:
  21               		.file 1 "ip_pid.c"
   1:ip_pid.c      **** /**
   2:ip_pid.c      ****  * @file sam_pid.c
   3:ip_pid.c      ****  *
   4:ip_pid.c      ****  * @brief PID controller
   5:ip_pid.c      ****  *
   6:ip_pid.c      ****  * @author  Theodore Ateba, tf.ateba@gmail.com
   7:ip_pid.c      ****  *
   8:ip_pid.c      ****  * @date    17 July 2016
   9:ip_pid.c      ****  *
  10:ip_pid.c      ****  * @update  30 July 2016
  11:ip_pid.c      ****  */
  12:ip_pid.c      **** 
  13:ip_pid.c      **** // TODO: Correct the general presentation of this file, also sam_pid.h
  14:ip_pid.c      **** 
  15:ip_pid.c      **** #include "ip_pid.h"
  16:ip_pid.c      **** void pid_initialize(pid_t* pid);
  17:ip_pid.c      **** 
  18:ip_pid.c      **** /**
  19:ip_pid.c      ****  * @fn    pid_init
  20:ip_pid.c      ****  * @brief Initialization of the PID controller.
  21:ip_pid.c      ****  *
  22:ip_pid.c      ****  * @param[in] pid                 Limits of the PID output.
  23:ip_pid.c      ****  * @param[in] kp                  Proportional gain
  24:ip_pid.c      ****  * @param[in] ki                  Integral gain
  25:ip_pid.c      ****  * @param[in] kd                  Derivative gain
  26:ip_pid.c      ****  * @param[in] controllerDirection Direction of the PID controler
  27:ip_pid.c      ****  */
  28:ip_pid.c      **** void pid_init(pid_t *pid, float kp, float ki, float kd,
  29:ip_pid.c      ****     pid_direction_e ControllerDirection){
  30:ip_pid.c      ****   pid->input = 0;
  31:ip_pid.c      ****   pid->output = 0;
  32:ip_pid.c      ****   pid->setpoint = 0;
  33:ip_pid.c      ****   pid->ITerm = 0;
  34:ip_pid.c      ****   pid->lastInput = 0;
  35:ip_pid.c      ****   pid->inAuto = false;
  36:ip_pid.c      **** 
  37:ip_pid.c      ****   pid_setOutputLimits(pid, -255, 255);
  38:ip_pid.c      **** 
  39:ip_pid.c      ****   //default Controller Sample Time is 0.1 seconds
  40:ip_pid.c      ****   pid->SampleTime = 10;
  41:ip_pid.c      **** 
  42:ip_pid.c      ****   pid_setControllerDirection(pid, ControllerDirection);
  43:ip_pid.c      ****   pid_setTunings(pid, kp, ki, kd);
  44:ip_pid.c      **** 
  45:ip_pid.c      **** //  pid->lastTime = millis() - pid->SampleTime;
  46:ip_pid.c      **** }
  47:ip_pid.c      ****  
  48:ip_pid.c      ****  
  49:ip_pid.c      **** /* Compute() **********************************************************************
  50:ip_pid.c      ****  *     This, as they say, is where the magic happens.  this function should be called
  51:ip_pid.c      ****  *   every time "void loop()" executes.  the function will decide for itself whether a new
  52:ip_pid.c      ****  *   pid Output needs to be computed.  returns true when the output is computed,
  53:ip_pid.c      ****  *   false when nothing has been done.
  54:ip_pid.c      ****  **********************************************************************************/ 
  55:ip_pid.c      **** /**
  56:ip_pid.c      ****  * @fn    pid_compute
  57:ip_pid.c      ****  * @brief Calcul the output value of the PID controller
  58:ip_pid.c      ****  *
  59:ip_pid.c      ****  * @param[in] pid The pointer of the PID controlleur
  60:ip_pid.c      ****  * @return        The result of the computing operation 
  61:ip_pid.c      ****  */
  62:ip_pid.c      **** bool pid_compute(pid_t *pid) {
  22               		.loc 1 62 0
  23               		.cfi_startproc
  24               	.LVL0:
  25 0000 2F92      		push r2
  26               	.LCFI0:
  27               		.cfi_def_cfa_offset 4
  28               		.cfi_offset 2, -3
  29 0002 3F92      		push r3
  30               	.LCFI1:
  31               		.cfi_def_cfa_offset 5
  32               		.cfi_offset 3, -4
  33 0004 4F92      		push r4
  34               	.LCFI2:
  35               		.cfi_def_cfa_offset 6
  36               		.cfi_offset 4, -5
  37 0006 5F92      		push r5
  38               	.LCFI3:
  39               		.cfi_def_cfa_offset 7
  40               		.cfi_offset 5, -6
  41 0008 6F92      		push r6
  42               	.LCFI4:
  43               		.cfi_def_cfa_offset 8
  44               		.cfi_offset 6, -7
  45 000a 7F92      		push r7
  46               	.LCFI5:
  47               		.cfi_def_cfa_offset 9
  48               		.cfi_offset 7, -8
  49 000c 8F92      		push r8
  50               	.LCFI6:
  51               		.cfi_def_cfa_offset 10
  52               		.cfi_offset 8, -9
  53 000e 9F92      		push r9
  54               	.LCFI7:
  55               		.cfi_def_cfa_offset 11
  56               		.cfi_offset 9, -10
  57 0010 AF92      		push r10
  58               	.LCFI8:
  59               		.cfi_def_cfa_offset 12
  60               		.cfi_offset 10, -11
  61 0012 BF92      		push r11
  62               	.LCFI9:
  63               		.cfi_def_cfa_offset 13
  64               		.cfi_offset 11, -12
  65 0014 CF92      		push r12
  66               	.LCFI10:
  67               		.cfi_def_cfa_offset 14
  68               		.cfi_offset 12, -13
  69 0016 DF92      		push r13
  70               	.LCFI11:
  71               		.cfi_def_cfa_offset 15
  72               		.cfi_offset 13, -14
  73 0018 EF92      		push r14
  74               	.LCFI12:
  75               		.cfi_def_cfa_offset 16
  76               		.cfi_offset 14, -15
  77 001a FF92      		push r15
  78               	.LCFI13:
  79               		.cfi_def_cfa_offset 17
  80               		.cfi_offset 15, -16
  81 001c 0F93      		push r16
  82               	.LCFI14:
  83               		.cfi_def_cfa_offset 18
  84               		.cfi_offset 16, -17
  85 001e 1F93      		push r17
  86               	.LCFI15:
  87               		.cfi_def_cfa_offset 19
  88               		.cfi_offset 17, -18
  89 0020 CF93      		push r28
  90               	.LCFI16:
  91               		.cfi_def_cfa_offset 20
  92               		.cfi_offset 28, -19
  93 0022 DF93      		push r29
  94               	.LCFI17:
  95               		.cfi_def_cfa_offset 21
  96               		.cfi_offset 29, -20
  97 0024 CDB7      		in r28,__SP_L__
  98 0026 DEB7      		in r29,__SP_H__
  99               	.LCFI18:
 100               		.cfi_def_cfa_register 28
 101 0028 2797      		sbiw r28,7
 102               	.LCFI19:
 103               		.cfi_def_cfa_offset 28
 104 002a 0FB6      		in __tmp_reg__,__SREG__
 105 002c F894      		cli
 106 002e DEBF      		out __SP_H__,r29
 107 0030 0FBE      		out __SREG__,__tmp_reg__
 108 0032 CDBF      		out __SP_L__,r28
 109               	/* prologue: function */
 110               	/* frame size = 7 */
 111               	/* stack size = 25 */
 112               	.L__stack_usage = 25
 113 0034 9F83      		std Y+7,r25
 114 0036 8E83      		std Y+6,r24
  63:ip_pid.c      ****   if (!pid->inAuto) {
 115               		.loc 1 63 0
 116 0038 FC01      		movw r30,r24
 117 003a F1AD      		ldd r31,Z+57
 118 003c F983      		std Y+1,r31
 119 003e FF23      		tst r31
 120 0040 01F4      		brne .+2
 121 0042 00C0      		rjmp .L2
  64:ip_pid.c      ****     return false;
  65:ip_pid.c      ****   }
  66:ip_pid.c      ****     //  unsigned long now = millis();
  67:ip_pid.c      ****     //  unsigned long timeChange = (now - pid->lastTime);
  68:ip_pid.c      ****     //  if (timeChange >= pid->SampleTime) {
  69:ip_pid.c      ****     /*Compute all the working error variables*/
  70:ip_pid.c      ****     float input = pid->input;
 122               		.loc 1 70 0
 123 0044 FC01      		movw r30,r24
 124 0046 218C      		ldd r2,Z+25
 125 0048 328C      		ldd r3,Z+26
 126 004a 438C      		ldd r4,Z+27
 127 004c 548C      		ldd r5,Z+28
 128               	.LVL1:
  71:ip_pid.c      ****     float error = pid->setpoint - input;
 129               		.loc 1 71 0
 130 004e A201      		movw r20,r4
 131 0050 9101      		movw r18,r2
 132 0052 61A1      		ldd r22,Z+33
 133 0054 72A1      		ldd r23,Z+34
 134 0056 83A1      		ldd r24,Z+35
 135 0058 94A1      		ldd r25,Z+36
 136 005a 0E94 0000 		call __subsf3
 137               	.LVL2:
 138 005e 6B01      		movw r12,r22
 139 0060 7C01      		movw r14,r24
 140               	.LVL3:
  72:ip_pid.c      ****     pid->ITerm += (pid->ki * error);
 141               		.loc 1 72 0
 142 0062 EE81      		ldd r30,Y+6
 143 0064 FF81      		ldd r31,Y+7
 144 0066 2089      		ldd r18,Z+16
 145 0068 3189      		ldd r19,Z+17
 146 006a 4289      		ldd r20,Z+18
 147 006c 5389      		ldd r21,Z+19
 148 006e 0E94 0000 		call __mulsf3
 149               	.LVL4:
 150 0072 EE81      		ldd r30,Y+6
 151 0074 FF81      		ldd r31,Y+7
 152 0076 25A1      		ldd r18,Z+37
 153 0078 36A1      		ldd r19,Z+38
 154 007a 47A1      		ldd r20,Z+39
 155 007c 50A5      		ldd r21,Z+40
 156 007e 0E94 0000 		call __addsf3
 157               	.LVL5:
 158 0082 3B01      		movw r6,r22
 159 0084 4C01      		movw r8,r24
 160 0086 CB01      		movw r24,r22
 161 0088 D401      		movw r26,r8
 162 008a EE81      		ldd r30,Y+6
 163 008c FF81      		ldd r31,Y+7
 164 008e 85A3      		std Z+37,r24
 165 0090 96A3      		std Z+38,r25
 166 0092 A7A3      		std Z+39,r26
 167 0094 B0A7      		std Z+40,r27
  73:ip_pid.c      ****     if (pid->ITerm > pid->outMax)
 168               		.loc 1 73 0
 169 0096 A5A8      		ldd r10,Z+53
 170 0098 B6A8      		ldd r11,Z+54
 171 009a 07A9      		ldd r16,Z+55
 172 009c 10AD      		ldd r17,Z+56
 173 009e 9501      		movw r18,r10
 174 00a0 A801      		movw r20,r16
 175 00a2 B301      		movw r22,r6
 176 00a4 C401      		movw r24,r8
 177 00a6 0E94 0000 		call __gtsf2
 178               	.LVL6:
 179 00aa 1816      		cp __zero_reg__,r24
 180 00ac 04F0      		brlt .+2
 181 00ae 00C0      		rjmp .L13
  74:ip_pid.c      ****       pid->ITerm = pid->outMax;
 182               		.loc 1 74 0
 183 00b0 C501      		movw r24,r10
 184 00b2 D801      		movw r26,r16
 185 00b4 EE81      		ldd r30,Y+6
 186 00b6 FF81      		ldd r31,Y+7
 187 00b8 85A3      		std Z+37,r24
 188 00ba 96A3      		std Z+38,r25
 189 00bc A7A3      		std Z+39,r26
 190 00be B0A7      		std Z+40,r27
 191 00c0 3501      		movw r6,r10
 192 00c2 4801      		movw r8,r16
 193               	.L5:
 194               	.LVL7:
  75:ip_pid.c      ****     else if (pid->ITerm < pid->outMin)
  76:ip_pid.c      ****       pid->ITerm = pid->outMin;
  77:ip_pid.c      ****     float dInput = (input - pid->lastInput);
  78:ip_pid.c      **** 
  79:ip_pid.c      ****     /*Compute PID Output*/
  80:ip_pid.c      ****     float output = pid->kp * error + pid->ITerm - pid->kd * dInput;
 195               		.loc 1 80 0
 196 00c4 EE81      		ldd r30,Y+6
 197 00c6 FF81      		ldd r31,Y+7
 198 00c8 2485      		ldd r18,Z+12
 199 00ca 3585      		ldd r19,Z+13
 200 00cc 4685      		ldd r20,Z+14
 201 00ce 5785      		ldd r21,Z+15
 202 00d0 C701      		movw r24,r14
 203 00d2 B601      		movw r22,r12
 204 00d4 0E94 0000 		call __mulsf3
 205               	.LVL8:
 206 00d8 9301      		movw r18,r6
 207 00da A401      		movw r20,r8
 208 00dc 0E94 0000 		call __addsf3
 209               	.LVL9:
 210 00e0 6B01      		movw r12,r22
 211 00e2 7C01      		movw r14,r24
 212               	.LVL10:
  77:ip_pid.c      ****     float dInput = (input - pid->lastInput);
 213               		.loc 1 77 0
 214 00e4 EE81      		ldd r30,Y+6
 215 00e6 FF81      		ldd r31,Y+7
 216 00e8 21A5      		ldd r18,Z+41
 217 00ea 32A5      		ldd r19,Z+42
 218 00ec 43A5      		ldd r20,Z+43
 219 00ee 54A5      		ldd r21,Z+44
 220               	.LVL11:
 221 00f0 C201      		movw r24,r4
 222 00f2 B101      		movw r22,r2
 223 00f4 0E94 0000 		call __subsf3
 224               	.LVL12:
 225               		.loc 1 80 0
 226 00f8 EE81      		ldd r30,Y+6
 227 00fa FF81      		ldd r31,Y+7
 228 00fc 2489      		ldd r18,Z+20
 229 00fe 3589      		ldd r19,Z+21
 230 0100 4689      		ldd r20,Z+22
 231 0102 5789      		ldd r21,Z+23
 232 0104 0E94 0000 		call __mulsf3
 233               	.LVL13:
 234 0108 9B01      		movw r18,r22
 235 010a AC01      		movw r20,r24
 236 010c C701      		movw r24,r14
 237 010e B601      		movw r22,r12
 238 0110 0E94 0000 		call __subsf3
 239               	.LVL14:
 240 0114 6B01      		movw r12,r22
 241 0116 7C01      		movw r14,r24
 242               	.LVL15:
  81:ip_pid.c      **** 
  82:ip_pid.c      ****     if (output > pid->outMax)
 243               		.loc 1 82 0
 244 0118 9B01      		movw r18,r22
 245 011a AC01      		movw r20,r24
 246 011c B501      		movw r22,r10
 247               	.LVL16:
 248 011e C801      		movw r24,r16
 249 0120 0E94 0000 		call __ltsf2
 250               	.LVL17:
 251 0124 87FD      		sbrc r24,7
 252 0126 00C0      		rjmp .L7
  83:ip_pid.c      ****       output = pid->outMax;
  84:ip_pid.c      ****     else if (output < pid->outMin)
 253               		.loc 1 84 0
 254 0128 EE81      		ldd r30,Y+6
 255 012a FF81      		ldd r31,Y+7
 256 012c A1A8      		ldd r10,Z+49
 257 012e B2A8      		ldd r11,Z+50
 258 0130 03A9      		ldd r16,Z+51
 259 0132 14A9      		ldd r17,Z+52
 260 0134 9501      		movw r18,r10
 261 0136 A801      		movw r20,r16
 262 0138 B601      		movw r22,r12
 263 013a C701      		movw r24,r14
 264 013c 0E94 0000 		call __ltsf2
 265               	.LVL18:
 266 0140 87FF      		sbrs r24,7
 267 0142 00C0      		rjmp .L15
 268               	.L7:
 269               	.LVL19:
  85:ip_pid.c      ****       output = pid->outMin;
  86:ip_pid.c      ****     pid->output = output;
 270               		.loc 1 86 0
 271 0144 C501      		movw r24,r10
 272 0146 D801      		movw r26,r16
 273 0148 EE81      		ldd r30,Y+6
 274 014a FF81      		ldd r31,Y+7
 275 014c 858F      		std Z+29,r24
 276 014e 968F      		std Z+30,r25
 277 0150 A78F      		std Z+31,r26
 278 0152 B0A3      		std Z+32,r27
  87:ip_pid.c      **** 
  88:ip_pid.c      ****     /*Remember some variables for next time*/
  89:ip_pid.c      ****     pid->lastInput = input;
 279               		.loc 1 89 0
 280 0154 21A6      		std Z+41,r2
 281 0156 32A6      		std Z+42,r3
 282 0158 43A6      		std Z+43,r4
 283 015a 54A6      		std Z+44,r5
 284               	.LVL20:
 285               	.L2:
  90:ip_pid.c      ****     //    pid->lastTime = now;
  91:ip_pid.c      ****     return true;
  92:ip_pid.c      ****     //  } else {
  93:ip_pid.c      ****     //    return false;
  94:ip_pid.c      ****     //  }
  95:ip_pid.c      **** }
 286               		.loc 1 95 0
 287 015c 8981      		ldd r24,Y+1
 288               	/* epilogue start */
 289 015e 2796      		adiw r28,7
 290 0160 0FB6      		in __tmp_reg__,__SREG__
 291 0162 F894      		cli
 292 0164 DEBF      		out __SP_H__,r29
 293 0166 0FBE      		out __SREG__,__tmp_reg__
 294 0168 CDBF      		out __SP_L__,r28
 295 016a DF91      		pop r29
 296 016c CF91      		pop r28
 297 016e 1F91      		pop r17
 298 0170 0F91      		pop r16
 299 0172 FF90      		pop r15
 300 0174 EF90      		pop r14
 301 0176 DF90      		pop r13
 302 0178 CF90      		pop r12
 303 017a BF90      		pop r11
 304 017c AF90      		pop r10
 305 017e 9F90      		pop r9
 306 0180 8F90      		pop r8
 307 0182 7F90      		pop r7
 308 0184 6F90      		pop r6
 309 0186 5F90      		pop r5
 310 0188 4F90      		pop r4
 311 018a 3F90      		pop r3
 312 018c 2F90      		pop r2
 313 018e 0895      		ret
 314               	.LVL21:
 315               	.L13:
  75:ip_pid.c      ****     else if (pid->ITerm < pid->outMin)
 316               		.loc 1 75 0
 317 0190 EE81      		ldd r30,Y+6
 318 0192 FF81      		ldd r31,Y+7
 319 0194 F1A9      		ldd r31,Z+49
 320 0196 FA83      		std Y+2,r31
 321 0198 EE81      		ldd r30,Y+6
 322 019a FF81      		ldd r31,Y+7
 323 019c F2A9      		ldd r31,Z+50
 324 019e FB83      		std Y+3,r31
 325 01a0 EE81      		ldd r30,Y+6
 326 01a2 FF81      		ldd r31,Y+7
 327 01a4 F3A9      		ldd r31,Z+51
 328 01a6 FC83      		std Y+4,r31
 329 01a8 EE81      		ldd r30,Y+6
 330 01aa FF81      		ldd r31,Y+7
 331 01ac F4A9      		ldd r31,Z+52
 332 01ae FD83      		std Y+5,r31
 333 01b0 2A81      		ldd r18,Y+2
 334 01b2 3B81      		ldd r19,Y+3
 335 01b4 4C81      		ldd r20,Y+4
 336 01b6 5F2F      		mov r21,r31
 337 01b8 B301      		movw r22,r6
 338 01ba C401      		movw r24,r8
 339 01bc 0E94 0000 		call __ltsf2
 340               	.LVL22:
 341 01c0 87FF      		sbrs r24,7
 342 01c2 00C0      		rjmp .L5
  76:ip_pid.c      ****       pid->ITerm = pid->outMin;
 343               		.loc 1 76 0
 344 01c4 8A81      		ldd r24,Y+2
 345 01c6 9B81      		ldd r25,Y+3
 346 01c8 AC81      		ldd r26,Y+4
 347 01ca BD81      		ldd r27,Y+5
 348 01cc EE81      		ldd r30,Y+6
 349 01ce FF81      		ldd r31,Y+7
 350 01d0 85A3      		std Z+37,r24
 351 01d2 96A3      		std Z+38,r25
 352 01d4 A7A3      		std Z+39,r26
 353 01d6 B0A7      		std Z+40,r27
 354 01d8 3C01      		movw r6,r24
 355 01da 4D01      		movw r8,r26
 356 01dc 00C0      		rjmp .L5
 357               	.LVL23:
 358               	.L15:
  80:ip_pid.c      ****     float output = pid->kp * error + pid->ITerm - pid->kd * dInput;
 359               		.loc 1 80 0
 360 01de 5601      		movw r10,r12
 361 01e0 8701      		movw r16,r14
 362 01e2 00C0      		rjmp .L7
 363               		.cfi_endproc
 364               	.LFE1:
 366               	.global	__floatunsisf
 367               	.global	__divsf3
 368               		.section	.text.pid_setTunings,"ax",@progbits
 369               	.global	pid_setTunings
 371               	pid_setTunings:
 372               	.LFB2:
  96:ip_pid.c      **** 
  97:ip_pid.c      **** 
  98:ip_pid.c      **** /* SetTunings(...)*************************************************************
  99:ip_pid.c      ****  * This function allows the controller's dynamic performance to be adjusted. 
 100:ip_pid.c      ****  * it's called automatically from the constructor, but tunings can also
 101:ip_pid.c      ****  * be adjusted on the fly during normal operation
 102:ip_pid.c      ****  ******************************************************************************/ 
 103:ip_pid.c      **** /**
 104:ip_pid.c      ****  * @fn    pid_setTunings
 105:ip_pid.c      ****  * @brief Configure the PID controller
 106:ip_pid.c      ****  *
 107:ip_pid.c      ****  * @param[in] pid The pointer to the PID controller
 108:ip_pid.c      ****  * @param[in] kp  The proportionnal gain
 109:ip_pid.c      ****  * @param[in] Ki  The integral gain
 110:ip_pid.c      ****  * @param[in] kd  The derivative gain
 111:ip_pid.c      ****  */
 112:ip_pid.c      **** void pid_setTunings(pid_t *pid, float kp, float ki, float kd){
 373               		.loc 1 112 0
 374               		.cfi_startproc
 375               	.LVL24:
 376 0000 2F92      		push r2
 377               	.LCFI20:
 378               		.cfi_def_cfa_offset 4
 379               		.cfi_offset 2, -3
 380 0002 3F92      		push r3
 381               	.LCFI21:
 382               		.cfi_def_cfa_offset 5
 383               		.cfi_offset 3, -4
 384 0004 4F92      		push r4
 385               	.LCFI22:
 386               		.cfi_def_cfa_offset 6
 387               		.cfi_offset 4, -5
 388 0006 5F92      		push r5
 389               	.LCFI23:
 390               		.cfi_def_cfa_offset 7
 391               		.cfi_offset 5, -6
 392 0008 6F92      		push r6
 393               	.LCFI24:
 394               		.cfi_def_cfa_offset 8
 395               		.cfi_offset 6, -7
 396 000a 7F92      		push r7
 397               	.LCFI25:
 398               		.cfi_def_cfa_offset 9
 399               		.cfi_offset 7, -8
 400 000c 8F92      		push r8
 401               	.LCFI26:
 402               		.cfi_def_cfa_offset 10
 403               		.cfi_offset 8, -9
 404 000e 9F92      		push r9
 405               	.LCFI27:
 406               		.cfi_def_cfa_offset 11
 407               		.cfi_offset 9, -10
 408 0010 AF92      		push r10
 409               	.LCFI28:
 410               		.cfi_def_cfa_offset 12
 411               		.cfi_offset 10, -11
 412 0012 BF92      		push r11
 413               	.LCFI29:
 414               		.cfi_def_cfa_offset 13
 415               		.cfi_offset 11, -12
 416 0014 CF92      		push r12
 417               	.LCFI30:
 418               		.cfi_def_cfa_offset 14
 419               		.cfi_offset 12, -13
 420 0016 DF92      		push r13
 421               	.LCFI31:
 422               		.cfi_def_cfa_offset 15
 423               		.cfi_offset 13, -14
 424 0018 EF92      		push r14
 425               	.LCFI32:
 426               		.cfi_def_cfa_offset 16
 427               		.cfi_offset 14, -15
 428 001a FF92      		push r15
 429               	.LCFI33:
 430               		.cfi_def_cfa_offset 17
 431               		.cfi_offset 15, -16
 432 001c 0F93      		push r16
 433               	.LCFI34:
 434               		.cfi_def_cfa_offset 18
 435               		.cfi_offset 16, -17
 436 001e 1F93      		push r17
 437               	.LCFI35:
 438               		.cfi_def_cfa_offset 19
 439               		.cfi_offset 17, -18
 440 0020 CF93      		push r28
 441               	.LCFI36:
 442               		.cfi_def_cfa_offset 20
 443               		.cfi_offset 28, -19
 444 0022 DF93      		push r29
 445               	.LCFI37:
 446               		.cfi_def_cfa_offset 21
 447               		.cfi_offset 29, -20
 448 0024 00D0      		rcall .
 449 0026 1F92      		push __zero_reg__
 450               	.LCFI38:
 451               		.cfi_def_cfa_offset 25
 452 0028 CDB7      		in r28,__SP_L__
 453 002a DEB7      		in r29,__SP_H__
 454               	.LCFI39:
 455               		.cfi_def_cfa_register 28
 456               	/* prologue: function */
 457               	/* frame size = 4 */
 458               	/* stack size = 22 */
 459               	.L__stack_usage = 22
 460 002c 1C01      		movw r2,r24
 461 002e 4A01      		movw r8,r20
 462 0030 5B01      		movw r10,r22
 463 0032 2801      		movw r4,r16
 464 0034 3901      		movw r6,r18
 113:ip_pid.c      ****   if(kp < 0 || ki < 0 || kd < 0){
 465               		.loc 1 113 0
 466 0036 20E0      		ldi r18,0
 467 0038 30E0      		ldi r19,0
 468 003a A901      		movw r20,r18
 469 003c C501      		movw r24,r10
 470 003e B401      		movw r22,r8
 471 0040 0E94 0000 		call __ltsf2
 472               	.LVL25:
 473 0044 87FD      		sbrc r24,7
 474 0046 00C0      		rjmp .L16
 475 0048 20E0      		ldi r18,0
 476 004a 30E0      		ldi r19,0
 477 004c A901      		movw r20,r18
 478 004e C301      		movw r24,r6
 479 0050 B201      		movw r22,r4
 480 0052 0E94 0000 		call __ltsf2
 481               	.LVL26:
 482 0056 87FD      		sbrc r24,7
 483 0058 00C0      		rjmp .L16
 484               		.loc 1 113 0 is_stmt 0 discriminator 1
 485 005a 20E0      		ldi r18,0
 486 005c 30E0      		ldi r19,0
 487 005e A901      		movw r20,r18
 488 0060 C701      		movw r24,r14
 489 0062 B601      		movw r22,r12
 490 0064 0E94 0000 		call __ltsf2
 491               	.LVL27:
 492 0068 87FD      		sbrc r24,7
 493 006a 00C0      		rjmp .L16
 114:ip_pid.c      ****     return;
 115:ip_pid.c      ****   }
 116:ip_pid.c      **** 
 117:ip_pid.c      ****   pid->dispKp = kp;
 494               		.loc 1 117 0 is_stmt 1
 495 006c F101      		movw r30,r2
 496 006e 8082      		st Z,r8
 497 0070 9182      		std Z+1,r9
 498 0072 A282      		std Z+2,r10
 499 0074 B382      		std Z+3,r11
 118:ip_pid.c      ****   pid->dispKi = ki;
 500               		.loc 1 118 0
 501 0076 4482      		std Z+4,r4
 502 0078 5582      		std Z+5,r5
 503 007a 6682      		std Z+6,r6
 504 007c 7782      		std Z+7,r7
 119:ip_pid.c      ****   pid->dispKd = kd;
 505               		.loc 1 119 0
 506 007e C086      		std Z+8,r12
 507 0080 D186      		std Z+9,r13
 508 0082 E286      		std Z+10,r14
 509 0084 F386      		std Z+11,r15
 120:ip_pid.c      **** 
 121:ip_pid.c      ****   float sampleTimeInSec = ((float) pid->SampleTime) / 1000;
 510               		.loc 1 121 0
 511 0086 65A5      		ldd r22,Z+45
 512 0088 76A5      		ldd r23,Z+46
 513 008a 87A5      		ldd r24,Z+47
 514 008c 90A9      		ldd r25,Z+48
 515 008e 0E94 0000 		call __floatunsisf
 516               	.LVL28:
 517 0092 20E0      		ldi r18,0
 518 0094 30E0      		ldi r19,0
 519 0096 4AE7      		ldi r20,lo8(122)
 520 0098 54E4      		ldi r21,lo8(68)
 521 009a 0E94 0000 		call __divsf3
 522               	.LVL29:
 523 009e 6983      		std Y+1,r22
 524 00a0 7A83      		std Y+2,r23
 525 00a2 8B83      		std Y+3,r24
 526 00a4 9C83      		std Y+4,r25
 527               	.LVL30:
 122:ip_pid.c      ****   pid->kp = kp;
 528               		.loc 1 122 0
 529 00a6 F101      		movw r30,r2
 530 00a8 8486      		std Z+12,r8
 531 00aa 9586      		std Z+13,r9
 532 00ac A686      		std Z+14,r10
 533 00ae B786      		std Z+15,r11
 123:ip_pid.c      ****   pid->ki = ki * sampleTimeInSec;
 534               		.loc 1 123 0
 535 00b0 9B01      		movw r18,r22
 536 00b2 AC01      		movw r20,r24
 537 00b4 C301      		movw r24,r6
 538 00b6 B201      		movw r22,r4
 539               	.LVL31:
 540 00b8 0E94 0000 		call __mulsf3
 541               	.LVL32:
 542 00bc 2B01      		movw r4,r22
 543 00be 3C01      		movw r6,r24
 544 00c0 F101      		movw r30,r2
 545 00c2 608B      		std Z+16,r22
 546 00c4 718B      		std Z+17,r23
 547 00c6 828B      		std Z+18,r24
 548 00c8 938B      		std Z+19,r25
 124:ip_pid.c      ****   pid->kd = kd / sampleTimeInSec;
 549               		.loc 1 124 0
 550 00ca 2981      		ldd r18,Y+1
 551 00cc 3A81      		ldd r19,Y+2
 552 00ce 4B81      		ldd r20,Y+3
 553 00d0 5C81      		ldd r21,Y+4
 554 00d2 C701      		movw r24,r14
 555 00d4 B601      		movw r22,r12
 556 00d6 0E94 0000 		call __divsf3
 557               	.LVL33:
 558 00da 6B01      		movw r12,r22
 559 00dc 7C01      		movw r14,r24
 560               	.LVL34:
 561 00de F101      		movw r30,r2
 562 00e0 648B      		std Z+20,r22
 563 00e2 758B      		std Z+21,r23
 564 00e4 868B      		std Z+22,r24
 565 00e6 978B      		std Z+23,r25
 125:ip_pid.c      **** 
 126:ip_pid.c      ****   if(pid->controllerDirection == PID_DIRECTION_REVERSE){
 566               		.loc 1 126 0
 567 00e8 808D      		ldd r24,Z+24
 568 00ea 8130      		cpi r24,lo8(1)
 569 00ec 01F0      		breq .L21
 570               	.LVL35:
 571               	.L16:
 572               	/* epilogue start */
 127:ip_pid.c      ****     pid->kp = (0 - pid->kp);
 128:ip_pid.c      ****     pid->ki = (0 - pid->ki);
 129:ip_pid.c      ****     pid->kd = (0 - pid->kd);
 130:ip_pid.c      ****   }
 131:ip_pid.c      **** }
 573               		.loc 1 131 0
 574 00ee 0F90      		pop __tmp_reg__
 575 00f0 0F90      		pop __tmp_reg__
 576 00f2 0F90      		pop __tmp_reg__
 577 00f4 0F90      		pop __tmp_reg__
 578 00f6 DF91      		pop r29
 579 00f8 CF91      		pop r28
 580 00fa 1F91      		pop r17
 581 00fc 0F91      		pop r16
 582               	.LVL36:
 583 00fe FF90      		pop r15
 584 0100 EF90      		pop r14
 585 0102 DF90      		pop r13
 586 0104 CF90      		pop r12
 587 0106 BF90      		pop r11
 588 0108 AF90      		pop r10
 589 010a 9F90      		pop r9
 590 010c 8F90      		pop r8
 591               	.LVL37:
 592 010e 7F90      		pop r7
 593 0110 6F90      		pop r6
 594 0112 5F90      		pop r5
 595 0114 4F90      		pop r4
 596 0116 3F90      		pop r3
 597 0118 2F90      		pop r2
 598               	.LVL38:
 599 011a 0895      		ret
 600               	.LVL39:
 601               	.L21:
 127:ip_pid.c      ****     pid->kp = (0 - pid->kp);
 602               		.loc 1 127 0
 603 011c A501      		movw r20,r10
 604 011e 9401      		movw r18,r8
 605 0120 60E0      		ldi r22,0
 606 0122 70E0      		ldi r23,0
 607 0124 CB01      		movw r24,r22
 608 0126 0E94 0000 		call __subsf3
 609               	.LVL40:
 610 012a F101      		movw r30,r2
 611 012c 6487      		std Z+12,r22
 612 012e 7587      		std Z+13,r23
 613 0130 8687      		std Z+14,r24
 614 0132 9787      		std Z+15,r25
 128:ip_pid.c      ****     pid->ki = (0 - pid->ki);
 615               		.loc 1 128 0
 616 0134 A301      		movw r20,r6
 617 0136 9201      		movw r18,r4
 618 0138 60E0      		ldi r22,0
 619 013a 70E0      		ldi r23,0
 620 013c CB01      		movw r24,r22
 621 013e 0E94 0000 		call __subsf3
 622               	.LVL41:
 623 0142 F101      		movw r30,r2
 624 0144 608B      		std Z+16,r22
 625 0146 718B      		std Z+17,r23
 626 0148 828B      		std Z+18,r24
 627 014a 938B      		std Z+19,r25
 129:ip_pid.c      ****     pid->kd = (0 - pid->kd);
 628               		.loc 1 129 0
 629 014c A701      		movw r20,r14
 630 014e 9601      		movw r18,r12
 631 0150 60E0      		ldi r22,0
 632 0152 70E0      		ldi r23,0
 633 0154 CB01      		movw r24,r22
 634 0156 0E94 0000 		call __subsf3
 635               	.LVL42:
 636 015a F101      		movw r30,r2
 637 015c 648B      		std Z+20,r22
 638 015e 758B      		std Z+21,r23
 639 0160 868B      		std Z+22,r24
 640 0162 978B      		std Z+23,r25
 641 0164 00C0      		rjmp .L16
 642               		.cfi_endproc
 643               	.LFE2:
 645               		.section	.text.pid_init,"ax",@progbits
 646               	.global	pid_init
 648               	pid_init:
 649               	.LFB0:
  29:ip_pid.c      ****     pid_direction_e ControllerDirection){
 650               		.loc 1 29 0
 651               		.cfi_startproc
 652               	.LVL43:
 653 0000 8F92      		push r8
 654               	.LCFI40:
 655               		.cfi_def_cfa_offset 4
 656               		.cfi_offset 8, -3
 657 0002 9F92      		push r9
 658               	.LCFI41:
 659               		.cfi_def_cfa_offset 5
 660               		.cfi_offset 9, -4
 661 0004 AF92      		push r10
 662               	.LCFI42:
 663               		.cfi_def_cfa_offset 6
 664               		.cfi_offset 10, -5
 665 0006 BF92      		push r11
 666               	.LCFI43:
 667               		.cfi_def_cfa_offset 7
 668               		.cfi_offset 11, -6
 669 0008 CF92      		push r12
 670               	.LCFI44:
 671               		.cfi_def_cfa_offset 8
 672               		.cfi_offset 12, -7
 673 000a DF92      		push r13
 674               	.LCFI45:
 675               		.cfi_def_cfa_offset 9
 676               		.cfi_offset 13, -8
 677 000c EF92      		push r14
 678               	.LCFI46:
 679               		.cfi_def_cfa_offset 10
 680               		.cfi_offset 14, -9
 681 000e FF92      		push r15
 682               	.LCFI47:
 683               		.cfi_def_cfa_offset 11
 684               		.cfi_offset 15, -10
 685 0010 0F93      		push r16
 686               	.LCFI48:
 687               		.cfi_def_cfa_offset 12
 688               		.cfi_offset 16, -11
 689 0012 1F93      		push r17
 690               	.LCFI49:
 691               		.cfi_def_cfa_offset 13
 692               		.cfi_offset 17, -12
 693               	/* prologue: function */
 694               	/* frame size = 0 */
 695               	/* stack size = 10 */
 696               	.L__stack_usage = 10
 697 0014 FC01      		movw r30,r24
 698 0016 8A2D      		mov r24,r10
 699               	.LVL44:
  30:ip_pid.c      ****   pid->input = 0;
 700               		.loc 1 30 0
 701 0018 118E      		std Z+25,__zero_reg__
 702 001a 128E      		std Z+26,__zero_reg__
 703 001c 138E      		std Z+27,__zero_reg__
 704 001e 148E      		std Z+28,__zero_reg__
  31:ip_pid.c      ****   pid->output = 0;
 705               		.loc 1 31 0
 706 0020 158E      		std Z+29,__zero_reg__
 707 0022 168E      		std Z+30,__zero_reg__
 708 0024 178E      		std Z+31,__zero_reg__
 709 0026 10A2      		std Z+32,__zero_reg__
  32:ip_pid.c      ****   pid->setpoint = 0;
 710               		.loc 1 32 0
 711 0028 11A2      		std Z+33,__zero_reg__
 712 002a 12A2      		std Z+34,__zero_reg__
 713 002c 13A2      		std Z+35,__zero_reg__
 714 002e 14A2      		std Z+36,__zero_reg__
  33:ip_pid.c      ****   pid->ITerm = 0;
 715               		.loc 1 33 0
 716 0030 15A2      		std Z+37,__zero_reg__
 717 0032 16A2      		std Z+38,__zero_reg__
 718 0034 17A2      		std Z+39,__zero_reg__
 719 0036 10A6      		std Z+40,__zero_reg__
  34:ip_pid.c      ****   pid->lastInput = 0;
 720               		.loc 1 34 0
 721 0038 11A6      		std Z+41,__zero_reg__
 722 003a 12A6      		std Z+42,__zero_reg__
 723 003c 13A6      		std Z+43,__zero_reg__
 724 003e 14A6      		std Z+44,__zero_reg__
  35:ip_pid.c      ****   pid->inAuto = false;
 725               		.loc 1 35 0
 726 0040 11AE      		std Z+57,__zero_reg__
 727               	.LVL45:
 728               	.LBB10:
 729               	.LBB11:
 132:ip_pid.c      ****   
 133:ip_pid.c      **** /* SetSampleTime(...) *********************************************************
 134:ip_pid.c      ****  * sets the period, in Milliseconds, at which the calculation is performed
 135:ip_pid.c      ****  ******************************************************************************/
 136:ip_pid.c      **** /**
 137:ip_pid.c      ****  * @fn    pid_setSampleTime
 138:ip_pid.c      ****  * @brief Configure the PID controller sample time interval
 139:ip_pid.c      ****  *
 140:ip_pid.c      ****  * @param[in] pid           The pointer to the PID controller
 141:ip_pid.c      ****  * @param[in] newSampleTime The new sample time to be set
 142:ip_pid.c      ****  */
 143:ip_pid.c      **** void pid_setSampleTime(pid_t *pid, int newSampleTime){
 144:ip_pid.c      ****   if (newSampleTime > 0){
 145:ip_pid.c      ****     float ratio = (float) newSampleTime / (float) pid->SampleTime;
 146:ip_pid.c      ****     pid->ki *= ratio;
 147:ip_pid.c      ****     pid->kd /= ratio;
 148:ip_pid.c      ****     pid->SampleTime = (unsigned long) newSampleTime;
 149:ip_pid.c      ****   }
 150:ip_pid.c      **** }
 151:ip_pid.c      ****  
 152:ip_pid.c      **** /* SetOutputLimits(...)****************************************************
 153:ip_pid.c      ****  *     This function will be used far more often than SetInputLimits.  while
 154:ip_pid.c      ****  *  the input to the controller will generally be in the 0-1023 range (which is
 155:ip_pid.c      ****  *  the default already,)  the output will be a little different.  maybe they'll
 156:ip_pid.c      ****  *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 157:ip_pid.c      ****  *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 158:ip_pid.c      ****  *  here.
 159:ip_pid.c      ****  **************************************************************************/
 160:ip_pid.c      **** /**
 161:ip_pid.c      ****  * @fn    pid_setOutputLimits
 162:ip_pid.c      ****  * @brief Configure the high and the low limit for the PID output.
 163:ip_pid.c      ****  *
 164:ip_pid.c      ****  * @param[in] pid The pointer to the PID controller
 165:ip_pid.c      ****  * @param[in] min The output low limit
 166:ip_pid.c      ****  * @param[in] max The output high limit
 167:ip_pid.c      ****  */
 168:ip_pid.c      **** void pid_setOutputLimits(pid_t *pid, float min, float max){
 169:ip_pid.c      ****   if(min >= max)
 170:ip_pid.c      ****     return;
 171:ip_pid.c      **** 
 172:ip_pid.c      ****   pid->outMin = min;
 730               		.loc 1 172 0
 731 0042 812C      		mov r8,__zero_reg__
 732 0044 912C      		mov r9,__zero_reg__
 733 0046 9FE7      		ldi r25,lo8(127)
 734 0048 A92E      		mov r10,r25
 735 004a 93EC      		ldi r25,lo8(-61)
 736 004c B92E      		mov r11,r25
 737 004e 81AA      		std Z+49,r8
 738 0050 92AA      		std Z+50,r9
 739 0052 A3AA      		std Z+51,r10
 740 0054 B4AA      		std Z+52,r11
 173:ip_pid.c      ****   pid->outMax = max;
 741               		.loc 1 173 0
 742 0056 812C      		mov r8,__zero_reg__
 743 0058 912C      		mov r9,__zero_reg__
 744 005a AFE7      		ldi r26,lo8(127)
 745 005c AA2E      		mov r10,r26
 746 005e A3E4      		ldi r26,lo8(67)
 747 0060 BA2E      		mov r11,r26
 748 0062 85AA      		std Z+53,r8
 749 0064 96AA      		std Z+54,r9
 750 0066 A7AA      		std Z+55,r10
 751 0068 B0AE      		std Z+56,r11
 752               	.LBE11:
 753               	.LBE10:
  40:ip_pid.c      ****   pid->SampleTime = 10;
 754               		.loc 1 40 0
 755 006a BAE0      		ldi r27,lo8(10)
 756 006c 8B2E      		mov r8,r27
 757 006e 912C      		mov r9,__zero_reg__
 758 0070 A12C      		mov r10,__zero_reg__
 759 0072 B12C      		mov r11,__zero_reg__
 760 0074 85A6      		std Z+45,r8
 761 0076 96A6      		std Z+46,r9
 762 0078 A7A6      		std Z+47,r10
 763 007a B0AA      		std Z+48,r11
 764               	.LVL46:
 765               	.LBB12:
 766               	.LBB13:
 174:ip_pid.c      **** 
 175:ip_pid.c      ****   if(pid->inAuto){
 176:ip_pid.c      ****     if(pid->output > pid->outMax)
 177:ip_pid.c      ****       pid->output = pid->outMax;
 178:ip_pid.c      ****     else if (pid->output < pid->outMin)
 179:ip_pid.c      ****       pid->output = pid->outMin;
 180:ip_pid.c      **** 
 181:ip_pid.c      ****     if (pid->ITerm > pid->outMax)
 182:ip_pid.c      ****       pid->ITerm = pid->outMax;
 183:ip_pid.c      ****     else if (pid->ITerm < pid->outMin)
 184:ip_pid.c      ****       pid->ITerm = pid->outMin;
 185:ip_pid.c      ****   }
 186:ip_pid.c      **** }
 187:ip_pid.c      **** 
 188:ip_pid.c      **** /* SetMode(...)****************************************************************
 189:ip_pid.c      ****  * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 190:ip_pid.c      ****  * when the transition from manual to auto occurs, the controller is
 191:ip_pid.c      ****  * automatically initialized
 192:ip_pid.c      ****  ******************************************************************************/ 
 193:ip_pid.c      **** /**
 194:ip_pid.c      ****  * @fn    pid_setMode
 195:ip_pid.c      ****  * @brief Configure the PID mode to manual or automatic
 196:ip_pid.c      ****  *
 197:ip_pid.c      ****  * @param[in] pid   The pointer to the PID controller
 198:ip_pid.c      ****  * @param[in] mode  The configuration mode to set
 199:ip_pid.c      ****  */
 200:ip_pid.c      **** void pid_setMode(pid_t *pid, pid_mode_e mode){
 201:ip_pid.c      ****     bool newAuto = (mode == PID_MODE_AUTOMATIC);
 202:ip_pid.c      ****     if(newAuto == !pid->inAuto)/*we just went from manual to auto*/
 203:ip_pid.c      ****       pid_initialize(pid);
 204:ip_pid.c      ****     pid->inAuto = newAuto;
 205:ip_pid.c      **** }
 206:ip_pid.c      ****  
 207:ip_pid.c      **** /* Initialize()****************************************************************
 208:ip_pid.c      ****  *  does all the things that need to happen to ensure a bumpless transfer
 209:ip_pid.c      ****  *  from manual to automatic mode.
 210:ip_pid.c      ****  ******************************************************************************/ 
 211:ip_pid.c      **** void pid_initialize(pid_t *pid){
 212:ip_pid.c      ****   pid->ITerm = pid->output;
 213:ip_pid.c      ****   pid->lastInput = pid->input;
 214:ip_pid.c      ****   if (pid->ITerm > pid->outMax)
 215:ip_pid.c      ****     pid->ITerm = pid->outMax;
 216:ip_pid.c      ****   else if (pid->ITerm < pid->outMin)
 217:ip_pid.c      ****     pid->ITerm = pid->outMin;
 218:ip_pid.c      **** }
 219:ip_pid.c      **** 
 220:ip_pid.c      **** /* SetControllerDirection(...)*************************************************
 221:ip_pid.c      ****  * The PID will either be connected to a DIRECT acting process (+Output leads 
 222:ip_pid.c      ****  * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 223:ip_pid.c      ****  * know which one, because otherwise we may increase the output when we should
 224:ip_pid.c      ****  * be decreasing.  This is called from the constructor.
 225:ip_pid.c      ****  ******************************************************************************/
 226:ip_pid.c      **** void pid_setControllerDirection(pid_t *pid, pid_direction_e direction) {
 227:ip_pid.c      ****   if (pid->inAuto && direction != pid->controllerDirection) {
 228:ip_pid.c      ****     pid->kp = (0 - pid->kp);
 229:ip_pid.c      ****     pid->ki = (0 - pid->ki);
 230:ip_pid.c      ****     pid->kd = (0 - pid->kd);
 231:ip_pid.c      ****   }
 232:ip_pid.c      ****   pid->controllerDirection = direction;
 767               		.loc 1 232 0
 768 007c 808F      		std Z+24,r24
 769               	.LBE13:
 770               	.LBE12:
  43:ip_pid.c      ****   pid_setTunings(pid, kp, ki, kd);
 771               		.loc 1 43 0
 772 007e CF01      		movw r24,r30
 773 0080 0E94 0000 		call pid_setTunings
 774               	.LVL47:
 775               	/* epilogue start */
  46:ip_pid.c      **** }
 776               		.loc 1 46 0
 777 0084 1F91      		pop r17
 778 0086 0F91      		pop r16
 779               	.LVL48:
 780 0088 FF90      		pop r15
 781 008a EF90      		pop r14
 782 008c DF90      		pop r13
 783 008e CF90      		pop r12
 784               	.LVL49:
 785 0090 BF90      		pop r11
 786 0092 AF90      		pop r10
 787               	.LVL50:
 788 0094 9F90      		pop r9
 789 0096 8F90      		pop r8
 790 0098 0895      		ret
 791               		.cfi_endproc
 792               	.LFE0:
 794               	.global	__floatsisf
 795               		.section	.text.pid_setSampleTime,"ax",@progbits
 796               	.global	pid_setSampleTime
 798               	pid_setSampleTime:
 799               	.LFB3:
 143:ip_pid.c      **** void pid_setSampleTime(pid_t *pid, int newSampleTime){
 800               		.loc 1 143 0
 801               		.cfi_startproc
 802               	.LVL51:
 803 0000 8F92      		push r8
 804               	.LCFI50:
 805               		.cfi_def_cfa_offset 4
 806               		.cfi_offset 8, -3
 807 0002 9F92      		push r9
 808               	.LCFI51:
 809               		.cfi_def_cfa_offset 5
 810               		.cfi_offset 9, -4
 811 0004 AF92      		push r10
 812               	.LCFI52:
 813               		.cfi_def_cfa_offset 6
 814               		.cfi_offset 10, -5
 815 0006 BF92      		push r11
 816               	.LCFI53:
 817               		.cfi_def_cfa_offset 7
 818               		.cfi_offset 11, -6
 819 0008 CF92      		push r12
 820               	.LCFI54:
 821               		.cfi_def_cfa_offset 8
 822               		.cfi_offset 12, -7
 823 000a DF92      		push r13
 824               	.LCFI55:
 825               		.cfi_def_cfa_offset 9
 826               		.cfi_offset 13, -8
 827 000c EF92      		push r14
 828               	.LCFI56:
 829               		.cfi_def_cfa_offset 10
 830               		.cfi_offset 14, -9
 831 000e FF92      		push r15
 832               	.LCFI57:
 833               		.cfi_def_cfa_offset 11
 834               		.cfi_offset 15, -10
 835 0010 CF93      		push r28
 836               	.LCFI58:
 837               		.cfi_def_cfa_offset 12
 838               		.cfi_offset 28, -11
 839 0012 DF93      		push r29
 840               	.LCFI59:
 841               		.cfi_def_cfa_offset 13
 842               		.cfi_offset 29, -12
 843               	/* prologue: function */
 844               	/* frame size = 0 */
 845               	/* stack size = 10 */
 846               	.L__stack_usage = 10
 847 0014 EC01      		movw r28,r24
 144:ip_pid.c      ****   if (newSampleTime > 0){
 848               		.loc 1 144 0
 849 0016 1616      		cp __zero_reg__,r22
 850 0018 1706      		cpc __zero_reg__,r23
 851 001a 04F4      		brge .L23
 852               	.LBB14:
 145:ip_pid.c      ****     float ratio = (float) newSampleTime / (float) pid->SampleTime;
 853               		.loc 1 145 0
 854 001c 6B01      		movw r12,r22
 855 001e EE24      		clr r14
 856 0020 D7FC      		sbrc r13,7
 857 0022 E094      		com r14
 858 0024 FE2C      		mov r15,r14
 859 0026 C701      		movw r24,r14
 860 0028 B601      		movw r22,r12
 861               	.LVL52:
 862 002a 0E94 0000 		call __floatsisf
 863               	.LVL53:
 864 002e 4B01      		movw r8,r22
 865 0030 5C01      		movw r10,r24
 866 0032 6DA5      		ldd r22,Y+45
 867 0034 7EA5      		ldd r23,Y+46
 868 0036 8FA5      		ldd r24,Y+47
 869 0038 98A9      		ldd r25,Y+48
 870 003a 0E94 0000 		call __floatunsisf
 871               	.LVL54:
 872 003e 9B01      		movw r18,r22
 873 0040 AC01      		movw r20,r24
 874 0042 C501      		movw r24,r10
 875 0044 B401      		movw r22,r8
 876 0046 0E94 0000 		call __divsf3
 877               	.LVL55:
 878 004a 4B01      		movw r8,r22
 879 004c 5C01      		movw r10,r24
 880               	.LVL56:
 146:ip_pid.c      ****     pid->ki *= ratio;
 881               		.loc 1 146 0
 882 004e 9B01      		movw r18,r22
 883 0050 AC01      		movw r20,r24
 884 0052 6889      		ldd r22,Y+16
 885 0054 7989      		ldd r23,Y+17
 886 0056 8A89      		ldd r24,Y+18
 887 0058 9B89      		ldd r25,Y+19
 888 005a 0E94 0000 		call __mulsf3
 889               	.LVL57:
 890 005e 688B      		std Y+16,r22
 891 0060 798B      		std Y+17,r23
 892 0062 8A8B      		std Y+18,r24
 893 0064 9B8B      		std Y+19,r25
 147:ip_pid.c      ****     pid->kd /= ratio;
 894               		.loc 1 147 0
 895 0066 A501      		movw r20,r10
 896 0068 9401      		movw r18,r8
 897 006a 6C89      		ldd r22,Y+20
 898 006c 7D89      		ldd r23,Y+21
 899 006e 8E89      		ldd r24,Y+22
 900 0070 9F89      		ldd r25,Y+23
 901 0072 0E94 0000 		call __divsf3
 902               	.LVL58:
 903 0076 6C8B      		std Y+20,r22
 904 0078 7D8B      		std Y+21,r23
 905 007a 8E8B      		std Y+22,r24
 906 007c 9F8B      		std Y+23,r25
 148:ip_pid.c      ****     pid->SampleTime = (unsigned long) newSampleTime;
 907               		.loc 1 148 0
 908 007e CDA6      		std Y+45,r12
 909 0080 DEA6      		std Y+46,r13
 910 0082 EFA6      		std Y+47,r14
 911 0084 F8AA      		std Y+48,r15
 912               	.LVL59:
 913               	.L23:
 914               	/* epilogue start */
 915               	.LBE14:
 150:ip_pid.c      **** }
 916               		.loc 1 150 0
 917 0086 DF91      		pop r29
 918 0088 CF91      		pop r28
 919               	.LVL60:
 920 008a FF90      		pop r15
 921 008c EF90      		pop r14
 922 008e DF90      		pop r13
 923 0090 CF90      		pop r12
 924 0092 BF90      		pop r11
 925 0094 AF90      		pop r10
 926 0096 9F90      		pop r9
 927 0098 8F90      		pop r8
 928 009a 0895      		ret
 929               		.cfi_endproc
 930               	.LFE3:
 932               	.global	__gesf2
 933               		.section	.text.pid_setOutputLimits,"ax",@progbits
 934               	.global	pid_setOutputLimits
 936               	pid_setOutputLimits:
 937               	.LFB4:
 168:ip_pid.c      **** void pid_setOutputLimits(pid_t *pid, float min, float max){
 938               		.loc 1 168 0
 939               		.cfi_startproc
 940               	.LVL61:
 941 0000 4F92      		push r4
 942               	.LCFI60:
 943               		.cfi_def_cfa_offset 4
 944               		.cfi_offset 4, -3
 945 0002 5F92      		push r5
 946               	.LCFI61:
 947               		.cfi_def_cfa_offset 5
 948               		.cfi_offset 5, -4
 949 0004 6F92      		push r6
 950               	.LCFI62:
 951               		.cfi_def_cfa_offset 6
 952               		.cfi_offset 6, -5
 953 0006 7F92      		push r7
 954               	.LCFI63:
 955               		.cfi_def_cfa_offset 7
 956               		.cfi_offset 7, -6
 957 0008 8F92      		push r8
 958               	.LCFI64:
 959               		.cfi_def_cfa_offset 8
 960               		.cfi_offset 8, -7
 961 000a 9F92      		push r9
 962               	.LCFI65:
 963               		.cfi_def_cfa_offset 9
 964               		.cfi_offset 9, -8
 965 000c AF92      		push r10
 966               	.LCFI66:
 967               		.cfi_def_cfa_offset 10
 968               		.cfi_offset 10, -9
 969 000e BF92      		push r11
 970               	.LCFI67:
 971               		.cfi_def_cfa_offset 11
 972               		.cfi_offset 11, -10
 973 0010 CF92      		push r12
 974               	.LCFI68:
 975               		.cfi_def_cfa_offset 12
 976               		.cfi_offset 12, -11
 977 0012 DF92      		push r13
 978               	.LCFI69:
 979               		.cfi_def_cfa_offset 13
 980               		.cfi_offset 13, -12
 981 0014 EF92      		push r14
 982               	.LCFI70:
 983               		.cfi_def_cfa_offset 14
 984               		.cfi_offset 14, -13
 985 0016 FF92      		push r15
 986               	.LCFI71:
 987               		.cfi_def_cfa_offset 15
 988               		.cfi_offset 15, -14
 989 0018 0F93      		push r16
 990               	.LCFI72:
 991               		.cfi_def_cfa_offset 16
 992               		.cfi_offset 16, -15
 993 001a 1F93      		push r17
 994               	.LCFI73:
 995               		.cfi_def_cfa_offset 17
 996               		.cfi_offset 17, -16
 997 001c CF93      		push r28
 998               	.LCFI74:
 999               		.cfi_def_cfa_offset 18
 1000               		.cfi_offset 28, -17
 1001 001e DF93      		push r29
 1002               	.LCFI75:
 1003               		.cfi_def_cfa_offset 19
 1004               		.cfi_offset 29, -18
 1005               	/* prologue: function */
 1006               	/* frame size = 0 */
 1007               	/* stack size = 16 */
 1008               	.L__stack_usage = 16
 1009 0020 EC01      		movw r28,r24
 1010 0022 4A01      		movw r8,r20
 1011 0024 5B01      		movw r10,r22
 1012 0026 6801      		movw r12,r16
 1013 0028 7901      		movw r14,r18
 169:ip_pid.c      ****   if(min >= max)
 1014               		.loc 1 169 0
 1015 002a A901      		movw r20,r18
 1016 002c 9801      		movw r18,r16
 1017 002e C501      		movw r24,r10
 1018 0030 B401      		movw r22,r8
 1019 0032 0E94 0000 		call __gesf2
 1020               	.LVL62:
 1021 0036 87FF      		sbrs r24,7
 1022 0038 00C0      		rjmp .L25
 172:ip_pid.c      ****   pid->outMin = min;
 1023               		.loc 1 172 0
 1024 003a 89AA      		std Y+49,r8
 1025 003c 9AAA      		std Y+50,r9
 1026 003e ABAA      		std Y+51,r10
 1027 0040 BCAA      		std Y+52,r11
 173:ip_pid.c      ****   pid->outMax = max;
 1028               		.loc 1 173 0
 1029 0042 CDAA      		std Y+53,r12
 1030 0044 DEAA      		std Y+54,r13
 1031 0046 EFAA      		std Y+55,r14
 1032 0048 F8AE      		std Y+56,r15
 175:ip_pid.c      ****   if(pid->inAuto){
 1033               		.loc 1 175 0
 1034 004a 89AD      		ldd r24,Y+57
 1035 004c 8823      		tst r24
 1036 004e 01F0      		breq .L25
 176:ip_pid.c      ****     if(pid->output > pid->outMax)
 1037               		.loc 1 176 0
 1038 0050 4D8C      		ldd r4,Y+29
 1039 0052 5E8C      		ldd r5,Y+30
 1040 0054 6F8C      		ldd r6,Y+31
 1041 0056 78A0      		ldd r7,Y+32
 1042 0058 A301      		movw r20,r6
 1043 005a 9201      		movw r18,r4
 1044 005c C701      		movw r24,r14
 1045 005e B601      		movw r22,r12
 1046 0060 0E94 0000 		call __ltsf2
 1047               	.LVL63:
 1048 0064 87FD      		sbrc r24,7
 1049 0066 00C0      		rjmp .L46
 178:ip_pid.c      ****     else if (pid->output < pid->outMin)
 1050               		.loc 1 178 0
 1051 0068 A301      		movw r20,r6
 1052 006a 9201      		movw r18,r4
 1053 006c C501      		movw r24,r10
 1054 006e B401      		movw r22,r8
 1055 0070 0E94 0000 		call __gtsf2
 1056               	.LVL64:
 1057 0074 1816      		cp __zero_reg__,r24
 1058 0076 04F4      		brge .L32
 179:ip_pid.c      ****       pid->output = pid->outMin;
 1059               		.loc 1 179 0
 1060 0078 8D8E      		std Y+29,r8
 1061 007a 9E8E      		std Y+30,r9
 1062 007c AF8E      		std Y+31,r10
 1063 007e B8A2      		std Y+32,r11
 1064               	.L32:
 181:ip_pid.c      ****     if (pid->ITerm > pid->outMax)
 1065               		.loc 1 181 0
 1066 0080 4DA0      		ldd r4,Y+37
 1067 0082 5EA0      		ldd r5,Y+38
 1068 0084 6FA0      		ldd r6,Y+39
 1069 0086 78A4      		ldd r7,Y+40
 1070 0088 A301      		movw r20,r6
 1071 008a 9201      		movw r18,r4
 1072 008c C701      		movw r24,r14
 1073 008e B601      		movw r22,r12
 1074 0090 0E94 0000 		call __ltsf2
 1075               	.LVL65:
 1076 0094 87FD      		sbrc r24,7
 1077 0096 00C0      		rjmp .L47
 183:ip_pid.c      ****     else if (pid->ITerm < pid->outMin)
 1078               		.loc 1 183 0
 1079 0098 A301      		movw r20,r6
 1080 009a 9201      		movw r18,r4
 1081 009c C501      		movw r24,r10
 1082 009e B401      		movw r22,r8
 1083 00a0 0E94 0000 		call __gtsf2
 1084               	.LVL66:
 1085 00a4 1816      		cp __zero_reg__,r24
 1086 00a6 04F4      		brge .L25
 184:ip_pid.c      ****       pid->ITerm = pid->outMin;
 1087               		.loc 1 184 0
 1088 00a8 8DA2      		std Y+37,r8
 1089 00aa 9EA2      		std Y+38,r9
 1090 00ac AFA2      		std Y+39,r10
 1091 00ae B8A6      		std Y+40,r11
 1092               	.LVL67:
 1093               	.L25:
 1094               	/* epilogue start */
 186:ip_pid.c      **** }
 1095               		.loc 1 186 0
 1096 00b0 DF91      		pop r29
 1097 00b2 CF91      		pop r28
 1098               	.LVL68:
 1099 00b4 1F91      		pop r17
 1100 00b6 0F91      		pop r16
 1101 00b8 FF90      		pop r15
 1102 00ba EF90      		pop r14
 1103 00bc DF90      		pop r13
 1104 00be CF90      		pop r12
 1105               	.LVL69:
 1106 00c0 BF90      		pop r11
 1107 00c2 AF90      		pop r10
 1108 00c4 9F90      		pop r9
 1109 00c6 8F90      		pop r8
 1110               	.LVL70:
 1111 00c8 7F90      		pop r7
 1112 00ca 6F90      		pop r6
 1113 00cc 5F90      		pop r5
 1114 00ce 4F90      		pop r4
 1115 00d0 0895      		ret
 1116               	.LVL71:
 1117               	.L46:
 177:ip_pid.c      ****       pid->output = pid->outMax;
 1118               		.loc 1 177 0
 1119 00d2 CD8E      		std Y+29,r12
 1120 00d4 DE8E      		std Y+30,r13
 1121 00d6 EF8E      		std Y+31,r14
 1122 00d8 F8A2      		std Y+32,r15
 1123 00da 00C0      		rjmp .L32
 1124               	.L47:
 182:ip_pid.c      ****       pid->ITerm = pid->outMax;
 1125               		.loc 1 182 0
 1126 00dc CDA2      		std Y+37,r12
 1127 00de DEA2      		std Y+38,r13
 1128 00e0 EFA2      		std Y+39,r14
 1129 00e2 F8A6      		std Y+40,r15
 1130 00e4 00C0      		rjmp .L25
 1131               		.cfi_endproc
 1132               	.LFE4:
 1134               		.section	.text.pid_setMode,"ax",@progbits
 1135               	.global	pid_setMode
 1137               	pid_setMode:
 1138               	.LFB5:
 200:ip_pid.c      **** void pid_setMode(pid_t *pid, pid_mode_e mode){
 1139               		.loc 1 200 0
 1140               		.cfi_startproc
 1141               	.LVL72:
 1142 0000 8F92      		push r8
 1143               	.LCFI76:
 1144               		.cfi_def_cfa_offset 4
 1145               		.cfi_offset 8, -3
 1146 0002 9F92      		push r9
 1147               	.LCFI77:
 1148               		.cfi_def_cfa_offset 5
 1149               		.cfi_offset 9, -4
 1150 0004 AF92      		push r10
 1151               	.LCFI78:
 1152               		.cfi_def_cfa_offset 6
 1153               		.cfi_offset 10, -5
 1154 0006 BF92      		push r11
 1155               	.LCFI79:
 1156               		.cfi_def_cfa_offset 7
 1157               		.cfi_offset 11, -6
 1158 0008 CF92      		push r12
 1159               	.LCFI80:
 1160               		.cfi_def_cfa_offset 8
 1161               		.cfi_offset 12, -7
 1162 000a DF92      		push r13
 1163               	.LCFI81:
 1164               		.cfi_def_cfa_offset 9
 1165               		.cfi_offset 13, -8
 1166 000c EF92      		push r14
 1167               	.LCFI82:
 1168               		.cfi_def_cfa_offset 10
 1169               		.cfi_offset 14, -9
 1170 000e FF92      		push r15
 1171               	.LCFI83:
 1172               		.cfi_def_cfa_offset 11
 1173               		.cfi_offset 15, -10
 1174 0010 1F93      		push r17
 1175               	.LCFI84:
 1176               		.cfi_def_cfa_offset 12
 1177               		.cfi_offset 17, -11
 1178 0012 CF93      		push r28
 1179               	.LCFI85:
 1180               		.cfi_def_cfa_offset 13
 1181               		.cfi_offset 28, -12
 1182 0014 DF93      		push r29
 1183               	.LCFI86:
 1184               		.cfi_def_cfa_offset 14
 1185               		.cfi_offset 29, -13
 1186               	/* prologue: function */
 1187               	/* frame size = 0 */
 1188               	/* stack size = 11 */
 1189               	.L__stack_usage = 11
 1190 0016 EC01      		movw r28,r24
 201:ip_pid.c      ****     bool newAuto = (mode == PID_MODE_AUTOMATIC);
 1191               		.loc 1 201 0
 1192 0018 11E0      		ldi r17,lo8(1)
 1193 001a 6111      		cpse r22,__zero_reg__
 1194 001c 10E0      		ldi r17,0
 1195               	.L49:
 1196               	.LVL73:
 202:ip_pid.c      ****     if(newAuto == !pid->inAuto)/*we just went from manual to auto*/
 1197               		.loc 1 202 0
 1198 001e 89AD      		ldd r24,Y+57
 1199               	.LVL74:
 1200 0020 91E0      		ldi r25,lo8(1)
 1201 0022 8927      		eor r24,r25
 1202 0024 8117      		cp r24,r17
 1203 0026 01F0      		breq .L63
 1204               	.LVL75:
 1205               	.L51:
 204:ip_pid.c      ****     pid->inAuto = newAuto;
 1206               		.loc 1 204 0
 1207 0028 19AF      		std Y+57,r17
 1208               	/* epilogue start */
 205:ip_pid.c      **** }
 1209               		.loc 1 205 0
 1210 002a DF91      		pop r29
 1211 002c CF91      		pop r28
 1212               	.LVL76:
 1213 002e 1F91      		pop r17
 1214               	.LVL77:
 1215 0030 FF90      		pop r15
 1216 0032 EF90      		pop r14
 1217 0034 DF90      		pop r13
 1218 0036 CF90      		pop r12
 1219 0038 BF90      		pop r11
 1220 003a AF90      		pop r10
 1221 003c 9F90      		pop r9
 1222 003e 8F90      		pop r8
 1223 0040 0895      		ret
 1224               	.LVL78:
 1225               	.L63:
 1226               	.LBB15:
 1227               	.LBB16:
 212:ip_pid.c      ****   pid->ITerm = pid->output;
 1228               		.loc 1 212 0
 1229 0042 CD8C      		ldd r12,Y+29
 1230 0044 DE8C      		ldd r13,Y+30
 1231 0046 EF8C      		ldd r14,Y+31
 1232 0048 F8A0      		ldd r15,Y+32
 1233 004a CDA2      		std Y+37,r12
 1234 004c DEA2      		std Y+38,r13
 1235 004e EFA2      		std Y+39,r14
 1236 0050 F8A6      		std Y+40,r15
 213:ip_pid.c      ****   pid->lastInput = pid->input;
 1237               		.loc 1 213 0
 1238 0052 898D      		ldd r24,Y+25
 1239 0054 9A8D      		ldd r25,Y+26
 1240 0056 AB8D      		ldd r26,Y+27
 1241 0058 BC8D      		ldd r27,Y+28
 1242 005a 89A7      		std Y+41,r24
 1243 005c 9AA7      		std Y+42,r25
 1244 005e ABA7      		std Y+43,r26
 1245 0060 BCA7      		std Y+44,r27
 214:ip_pid.c      ****   if (pid->ITerm > pid->outMax)
 1246               		.loc 1 214 0
 1247 0062 8DA8      		ldd r8,Y+53
 1248 0064 9EA8      		ldd r9,Y+54
 1249 0066 AFA8      		ldd r10,Y+55
 1250 0068 B8AC      		ldd r11,Y+56
 1251 006a A501      		movw r20,r10
 1252 006c 9401      		movw r18,r8
 1253 006e C701      		movw r24,r14
 1254 0070 B601      		movw r22,r12
 1255               	.LVL79:
 1256 0072 0E94 0000 		call __gtsf2
 1257               	.LVL80:
 1258 0076 1816      		cp __zero_reg__,r24
 1259 0078 04F0      		brlt .L62
 216:ip_pid.c      ****   else if (pid->ITerm < pid->outMin)
 1260               		.loc 1 216 0
 1261 007a 89A8      		ldd r8,Y+49
 1262 007c 9AA8      		ldd r9,Y+50
 1263 007e ABA8      		ldd r10,Y+51
 1264 0080 BCA8      		ldd r11,Y+52
 1265 0082 A501      		movw r20,r10
 1266 0084 9401      		movw r18,r8
 1267 0086 C701      		movw r24,r14
 1268 0088 B601      		movw r22,r12
 1269 008a 0E94 0000 		call __ltsf2
 1270               	.LVL81:
 1271 008e 87FF      		sbrs r24,7
 1272 0090 00C0      		rjmp .L51
 1273               	.L62:
 217:ip_pid.c      ****     pid->ITerm = pid->outMin;
 1274               		.loc 1 217 0
 1275 0092 8DA2      		std Y+37,r8
 1276 0094 9EA2      		std Y+38,r9
 1277 0096 AFA2      		std Y+39,r10
 1278 0098 B8A6      		std Y+40,r11
 1279 009a 00C0      		rjmp .L51
 1280               	.LBE16:
 1281               	.LBE15:
 1282               		.cfi_endproc
 1283               	.LFE5:
 1285               		.section	.text.pid_initialize,"ax",@progbits
 1286               	.global	pid_initialize
 1288               	pid_initialize:
 1289               	.LFB6:
 211:ip_pid.c      **** void pid_initialize(pid_t *pid){
 1290               		.loc 1 211 0
 1291               		.cfi_startproc
 1292               	.LVL82:
 1293 0000 8F92      		push r8
 1294               	.LCFI87:
 1295               		.cfi_def_cfa_offset 4
 1296               		.cfi_offset 8, -3
 1297 0002 9F92      		push r9
 1298               	.LCFI88:
 1299               		.cfi_def_cfa_offset 5
 1300               		.cfi_offset 9, -4
 1301 0004 AF92      		push r10
 1302               	.LCFI89:
 1303               		.cfi_def_cfa_offset 6
 1304               		.cfi_offset 10, -5
 1305 0006 BF92      		push r11
 1306               	.LCFI90:
 1307               		.cfi_def_cfa_offset 7
 1308               		.cfi_offset 11, -6
 1309 0008 CF92      		push r12
 1310               	.LCFI91:
 1311               		.cfi_def_cfa_offset 8
 1312               		.cfi_offset 12, -7
 1313 000a DF92      		push r13
 1314               	.LCFI92:
 1315               		.cfi_def_cfa_offset 9
 1316               		.cfi_offset 13, -8
 1317 000c EF92      		push r14
 1318               	.LCFI93:
 1319               		.cfi_def_cfa_offset 10
 1320               		.cfi_offset 14, -9
 1321 000e FF92      		push r15
 1322               	.LCFI94:
 1323               		.cfi_def_cfa_offset 11
 1324               		.cfi_offset 15, -10
 1325 0010 CF93      		push r28
 1326               	.LCFI95:
 1327               		.cfi_def_cfa_offset 12
 1328               		.cfi_offset 28, -11
 1329 0012 DF93      		push r29
 1330               	.LCFI96:
 1331               		.cfi_def_cfa_offset 13
 1332               		.cfi_offset 29, -12
 1333               	/* prologue: function */
 1334               	/* frame size = 0 */
 1335               	/* stack size = 10 */
 1336               	.L__stack_usage = 10
 1337 0014 EC01      		movw r28,r24
 212:ip_pid.c      ****   pid->ITerm = pid->output;
 1338               		.loc 1 212 0
 1339 0016 CD8C      		ldd r12,Y+29
 1340 0018 DE8C      		ldd r13,Y+30
 1341 001a EF8C      		ldd r14,Y+31
 1342 001c F8A0      		ldd r15,Y+32
 1343 001e CDA2      		std Y+37,r12
 1344 0020 DEA2      		std Y+38,r13
 1345 0022 EFA2      		std Y+39,r14
 1346 0024 F8A6      		std Y+40,r15
 213:ip_pid.c      ****   pid->lastInput = pid->input;
 1347               		.loc 1 213 0
 1348 0026 898D      		ldd r24,Y+25
 1349 0028 9A8D      		ldd r25,Y+26
 1350 002a AB8D      		ldd r26,Y+27
 1351 002c BC8D      		ldd r27,Y+28
 1352               	.LVL83:
 1353 002e 89A7      		std Y+41,r24
 1354 0030 9AA7      		std Y+42,r25
 1355 0032 ABA7      		std Y+43,r26
 1356 0034 BCA7      		std Y+44,r27
 214:ip_pid.c      ****   if (pid->ITerm > pid->outMax)
 1357               		.loc 1 214 0
 1358 0036 8DA8      		ldd r8,Y+53
 1359 0038 9EA8      		ldd r9,Y+54
 1360 003a AFA8      		ldd r10,Y+55
 1361 003c B8AC      		ldd r11,Y+56
 1362 003e A501      		movw r20,r10
 1363 0040 9401      		movw r18,r8
 1364 0042 C701      		movw r24,r14
 1365 0044 B601      		movw r22,r12
 1366 0046 0E94 0000 		call __gtsf2
 1367               	.LVL84:
 1368 004a 1816      		cp __zero_reg__,r24
 1369 004c 04F0      		brlt .L72
 216:ip_pid.c      ****   else if (pid->ITerm < pid->outMin)
 1370               		.loc 1 216 0
 1371 004e 89A8      		ldd r8,Y+49
 1372 0050 9AA8      		ldd r9,Y+50
 1373 0052 ABA8      		ldd r10,Y+51
 1374 0054 BCA8      		ldd r11,Y+52
 1375 0056 A501      		movw r20,r10
 1376 0058 9401      		movw r18,r8
 1377 005a C701      		movw r24,r14
 1378 005c B601      		movw r22,r12
 1379 005e 0E94 0000 		call __ltsf2
 1380               	.LVL85:
 1381 0062 87FF      		sbrs r24,7
 1382 0064 00C0      		rjmp .L64
 1383               	.L72:
 217:ip_pid.c      ****     pid->ITerm = pid->outMin;
 1384               		.loc 1 217 0
 1385 0066 8DA2      		std Y+37,r8
 1386 0068 9EA2      		std Y+38,r9
 1387 006a AFA2      		std Y+39,r10
 1388 006c B8A6      		std Y+40,r11
 1389               	.L64:
 1390               	/* epilogue start */
 218:ip_pid.c      **** }
 1391               		.loc 1 218 0
 1392 006e DF91      		pop r29
 1393 0070 CF91      		pop r28
 1394               	.LVL86:
 1395 0072 FF90      		pop r15
 1396 0074 EF90      		pop r14
 1397 0076 DF90      		pop r13
 1398 0078 CF90      		pop r12
 1399 007a BF90      		pop r11
 1400 007c AF90      		pop r10
 1401 007e 9F90      		pop r9
 1402 0080 8F90      		pop r8
 1403 0082 0895      		ret
 1404               		.cfi_endproc
 1405               	.LFE6:
 1407               		.section	.text.pid_setControllerDirection,"ax",@progbits
 1408               	.global	pid_setControllerDirection
 1410               	pid_setControllerDirection:
 1411               	.LFB7:
 226:ip_pid.c      **** void pid_setControllerDirection(pid_t *pid, pid_direction_e direction) {
 1412               		.loc 1 226 0
 1413               		.cfi_startproc
 1414               	.LVL87:
 1415 0000 1F93      		push r17
 1416               	.LCFI97:
 1417               		.cfi_def_cfa_offset 4
 1418               		.cfi_offset 17, -3
 1419 0002 CF93      		push r28
 1420               	.LCFI98:
 1421               		.cfi_def_cfa_offset 5
 1422               		.cfi_offset 28, -4
 1423 0004 DF93      		push r29
 1424               	.LCFI99:
 1425               		.cfi_def_cfa_offset 6
 1426               		.cfi_offset 29, -5
 1427               	/* prologue: function */
 1428               	/* frame size = 0 */
 1429               	/* stack size = 3 */
 1430               	.L__stack_usage = 3
 1431 0006 EC01      		movw r28,r24
 1432 0008 162F      		mov r17,r22
 227:ip_pid.c      ****   if (pid->inAuto && direction != pid->controllerDirection) {
 1433               		.loc 1 227 0
 1434 000a 89AD      		ldd r24,Y+57
 1435               	.LVL88:
 1436 000c 8823      		tst r24
 1437 000e 01F0      		breq .L74
 227:ip_pid.c      ****   if (pid->inAuto && direction != pid->controllerDirection) {
 1438               		.loc 1 227 0 is_stmt 0 discriminator 1
 1439 0010 888D      		ldd r24,Y+24
 1440 0012 8617      		cp r24,r22
 1441 0014 01F0      		breq .L74
 228:ip_pid.c      ****     pid->kp = (0 - pid->kp);
 1442               		.loc 1 228 0 is_stmt 1
 1443 0016 2C85      		ldd r18,Y+12
 1444 0018 3D85      		ldd r19,Y+13
 1445 001a 4E85      		ldd r20,Y+14
 1446 001c 5F85      		ldd r21,Y+15
 1447 001e 60E0      		ldi r22,0
 1448 0020 70E0      		ldi r23,0
 1449 0022 CB01      		movw r24,r22
 1450               	.LVL89:
 1451 0024 0E94 0000 		call __subsf3
 1452               	.LVL90:
 1453 0028 6C87      		std Y+12,r22
 1454 002a 7D87      		std Y+13,r23
 1455 002c 8E87      		std Y+14,r24
 1456 002e 9F87      		std Y+15,r25
 229:ip_pid.c      ****     pid->ki = (0 - pid->ki);
 1457               		.loc 1 229 0
 1458 0030 2889      		ldd r18,Y+16
 1459 0032 3989      		ldd r19,Y+17
 1460 0034 4A89      		ldd r20,Y+18
 1461 0036 5B89      		ldd r21,Y+19
 1462 0038 60E0      		ldi r22,0
 1463 003a 70E0      		ldi r23,0
 1464 003c CB01      		movw r24,r22
 1465 003e 0E94 0000 		call __subsf3
 1466               	.LVL91:
 1467 0042 688B      		std Y+16,r22
 1468 0044 798B      		std Y+17,r23
 1469 0046 8A8B      		std Y+18,r24
 1470 0048 9B8B      		std Y+19,r25
 230:ip_pid.c      ****     pid->kd = (0 - pid->kd);
 1471               		.loc 1 230 0
 1472 004a 2C89      		ldd r18,Y+20
 1473 004c 3D89      		ldd r19,Y+21
 1474 004e 4E89      		ldd r20,Y+22
 1475 0050 5F89      		ldd r21,Y+23
 1476 0052 60E0      		ldi r22,0
 1477 0054 70E0      		ldi r23,0
 1478 0056 CB01      		movw r24,r22
 1479 0058 0E94 0000 		call __subsf3
 1480               	.LVL92:
 1481 005c 6C8B      		std Y+20,r22
 1482 005e 7D8B      		std Y+21,r23
 1483 0060 8E8B      		std Y+22,r24
 1484 0062 9F8B      		std Y+23,r25
 1485               	.L74:
 1486               		.loc 1 232 0
 1487 0064 188F      		std Y+24,r17
 1488               	/* epilogue start */
 233:ip_pid.c      **** }
 1489               		.loc 1 233 0
 1490 0066 DF91      		pop r29
 1491 0068 CF91      		pop r28
 1492               	.LVL93:
 1493 006a 1F91      		pop r17
 1494               	.LVL94:
 1495 006c 0895      		ret
 1496               		.cfi_endproc
 1497               	.LFE7:
 1499               		.section	.text.pid_getKp,"ax",@progbits
 1500               	.global	pid_getKp
 1502               	pid_getKp:
 1503               	.LFB8:
 234:ip_pid.c      **** 
 235:ip_pid.c      **** /**
 236:ip_pid.c      ****  * @fn    pid_getKp
 237:ip_pid.c      ****  * @brief Get the proportional gain of the PID controller
 238:ip_pid.c      ****  *
 239:ip_pid.c      ****  * @param[in] pid     Pointer to the PID controller
 240:ip_pid.c      ****  * @return    dispKd  The Kp value
 241:ip_pid.c      ****  */
 242:ip_pid.c      **** float pid_getKp(pid_t *pid){
 1504               		.loc 1 242 0
 1505               		.cfi_startproc
 1506               	.LVL95:
 1507               	/* prologue: function */
 1508               	/* frame size = 0 */
 1509               	/* stack size = 0 */
 1510               	.L__stack_usage = 0
 243:ip_pid.c      ****   return pid->dispKp;
 1511               		.loc 1 243 0
 1512 0000 FC01      		movw r30,r24
 1513 0002 6081      		ld r22,Z
 1514 0004 7181      		ldd r23,Z+1
 1515 0006 8281      		ldd r24,Z+2
 1516 0008 9381      		ldd r25,Z+3
 244:ip_pid.c      **** }
 1517               		.loc 1 244 0
 1518 000a 0895      		ret
 1519               		.cfi_endproc
 1520               	.LFE8:
 1522               		.section	.text.pid_getKi,"ax",@progbits
 1523               	.global	pid_getKi
 1525               	pid_getKi:
 1526               	.LFB9:
 245:ip_pid.c      **** 
 246:ip_pid.c      **** /**
 247:ip_pid.c      ****  * @fn    pid_getKi
 248:ip_pid.c      ****  * @brief Get the integral gain of the PID controller
 249:ip_pid.c      ****  *
 250:ip_pid.c      ****  * @param[in] pid     Pointer to the PID controller
 251:ip_pid.c      ****  * @return    dispKd  The Ki value
 252:ip_pid.c      ****  */
 253:ip_pid.c      **** float pid_getKi(pid_t *pid){
 1527               		.loc 1 253 0
 1528               		.cfi_startproc
 1529               	.LVL96:
 1530               	/* prologue: function */
 1531               	/* frame size = 0 */
 1532               	/* stack size = 0 */
 1533               	.L__stack_usage = 0
 254:ip_pid.c      ****   return pid->dispKi;
 1534               		.loc 1 254 0
 1535 0000 FC01      		movw r30,r24
 1536 0002 6481      		ldd r22,Z+4
 1537 0004 7581      		ldd r23,Z+5
 1538 0006 8681      		ldd r24,Z+6
 1539 0008 9781      		ldd r25,Z+7
 255:ip_pid.c      **** }
 1540               		.loc 1 255 0
 1541 000a 0895      		ret
 1542               		.cfi_endproc
 1543               	.LFE9:
 1545               		.section	.text.pid_getKd,"ax",@progbits
 1546               	.global	pid_getKd
 1548               	pid_getKd:
 1549               	.LFB10:
 256:ip_pid.c      **** 
 257:ip_pid.c      **** /**
 258:ip_pid.c      ****  * @fn    pid_getKd
 259:ip_pid.c      ****  * @brief Get the derivative gain of the PID controller
 260:ip_pid.c      ****  *
 261:ip_pid.c      ****  * @param[in] pid     Pointer to the PID controller
 262:ip_pid.c      ****  * @return    dispKd  The Kd value
 263:ip_pid.c      ****  */
 264:ip_pid.c      **** float pid_getKd(pid_t *pid){
 1550               		.loc 1 264 0
 1551               		.cfi_startproc
 1552               	.LVL97:
 1553               	/* prologue: function */
 1554               	/* frame size = 0 */
 1555               	/* stack size = 0 */
 1556               	.L__stack_usage = 0
 265:ip_pid.c      ****   return pid->dispKd;
 1557               		.loc 1 265 0
 1558 0000 FC01      		movw r30,r24
 1559 0002 6085      		ldd r22,Z+8
 1560 0004 7185      		ldd r23,Z+9
 1561 0006 8285      		ldd r24,Z+10
 1562 0008 9385      		ldd r25,Z+11
 266:ip_pid.c      **** }
 1563               		.loc 1 266 0
 1564 000a 0895      		ret
 1565               		.cfi_endproc
 1566               	.LFE10:
 1568               		.section	.text.pid_getMode,"ax",@progbits
 1569               	.global	pid_getMode
 1571               	pid_getMode:
 1572               	.LFB11:
 267:ip_pid.c      **** 
 268:ip_pid.c      **** /**
 269:ip_pid.c      ****  * @fn    pid_getMode
 270:ip_pid.c      ****  * @brief Get the mode of the PID controller
 271:ip_pid.c      ****  *
 272:ip_pid.c      ****  * @param[in] pid The pointer to the PID controller
 273:ip_pid.c      ****  */
 274:ip_pid.c      **** pid_mode_e pid_getMode(pid_t *pid){
 1573               		.loc 1 274 0
 1574               		.cfi_startproc
 1575               	.LVL98:
 1576               	/* prologue: function */
 1577               	/* frame size = 0 */
 1578               	/* stack size = 0 */
 1579               	.L__stack_usage = 0
 275:ip_pid.c      ****   return pid->inAuto ? PID_MODE_AUTOMATIC : PID_MODE_MANUAL;
 1580               		.loc 1 275 0
 1581 0000 FC01      		movw r30,r24
 1582 0002 91AD      		ldd r25,Z+57
 276:ip_pid.c      **** }
 1583               		.loc 1 276 0
 1584 0004 81E0      		ldi r24,lo8(1)
 1585               	.LVL99:
 1586 0006 8927      		eor r24,r25
 1587 0008 0895      		ret
 1588               		.cfi_endproc
 1589               	.LFE11:
 1591               		.section	.text.pid_getDirection,"ax",@progbits
 1592               	.global	pid_getDirection
 1594               	pid_getDirection:
 1595               	.LFB12:
 277:ip_pid.c      **** 
 278:ip_pid.c      **** /**
 279:ip_pid.c      ****  * @fn    pid_getDirection
 280:ip_pid.c      ****  * @brief Get the direction of the PID
 281:ip_pid.c      ****  *
 282:ip_pid.c      ****  * @param[in] pid Pointer to the PID controller
 283:ip_pid.c      ****  */
 284:ip_pid.c      **** pid_direction_e pid_getDirection(pid_t *pid){
 1596               		.loc 1 284 0
 1597               		.cfi_startproc
 1598               	.LVL100:
 1599               	/* prologue: function */
 1600               	/* frame size = 0 */
 1601               	/* stack size = 0 */
 1602               	.L__stack_usage = 0
 285:ip_pid.c      ****   return pid->controllerDirection;
 286:ip_pid.c      **** }
 1603               		.loc 1 286 0
 1604 0000 FC01      		movw r30,r24
 1605 0002 808D      		ldd r24,Z+24
 1606               	.LVL101:
 1607 0004 0895      		ret
 1608               		.cfi_endproc
 1609               	.LFE12:
 1611               		.text
 1612               	.Letext0:
 1613               		.file 2 "ip_pid.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ip_pid.c
     /tmp/cckulVo5.s:2      *ABS*:0000003e __SP_H__
     /tmp/cckulVo5.s:3      *ABS*:0000003d __SP_L__
     /tmp/cckulVo5.s:4      *ABS*:0000003f __SREG__
     /tmp/cckulVo5.s:5      *ABS*:0000003b __RAMPZ__
     /tmp/cckulVo5.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cckulVo5.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cckulVo5.s:19     .text.pid_compute:00000000 pid_compute
     /tmp/cckulVo5.s:371    .text.pid_setTunings:00000000 pid_setTunings
     /tmp/cckulVo5.s:648    .text.pid_init:00000000 pid_init
     /tmp/cckulVo5.s:798    .text.pid_setSampleTime:00000000 pid_setSampleTime
     /tmp/cckulVo5.s:936    .text.pid_setOutputLimits:00000000 pid_setOutputLimits
     /tmp/cckulVo5.s:1137   .text.pid_setMode:00000000 pid_setMode
     /tmp/cckulVo5.s:1288   .text.pid_initialize:00000000 pid_initialize
     /tmp/cckulVo5.s:1410   .text.pid_setControllerDirection:00000000 pid_setControllerDirection
     /tmp/cckulVo5.s:1502   .text.pid_getKp:00000000 pid_getKp
     /tmp/cckulVo5.s:1525   .text.pid_getKi:00000000 pid_getKi
     /tmp/cckulVo5.s:1548   .text.pid_getKd:00000000 pid_getKd
     /tmp/cckulVo5.s:1571   .text.pid_getMode:00000000 pid_getMode
     /tmp/cckulVo5.s:1594   .text.pid_getDirection:00000000 pid_getDirection

UNDEFINED SYMBOLS
__subsf3
__mulsf3
__addsf3
__gtsf2
__ltsf2
__floatunsisf
__divsf3
__floatsisf
__gesf2
